// Mocks generated by Mockito 5.1.0 from annotations
// in bntu_app/test/repository/repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:bntu_app/core/domain/models/error_message_model.dart' as _i12;
import 'package:bntu_app/core/repository/error_messages_repository.dart'
    as _i11;
import 'package:bntu_app/features/admission_info/domain/models/info_cards_model.dart'
    as _i10;
import 'package:bntu_app/features/admission_info/repository/info_cards_repository.dart'
    as _i9;
import 'package:bntu_app/features/faculties/domain/models/faculty_model.dart'
    as _i3;
import 'package:bntu_app/features/faculties/repository/faculties_repository.dart'
    as _i4;
import 'package:bntu_app/features/map/domain/models/buildings_model.dart'
    as _i15;
import 'package:bntu_app/features/map/repository/buildings_repository.dart'
    as _i13;
import 'package:bntu_app/features/settings/repository/settings_repository.dart'
    as _i8;
import 'package:bntu_app/features/specialties/domain/models/speciality_model.dart'
    as _i7;
import 'package:bntu_app/features/specialties/repository/specialties_repository.dart'
    as _i6;
import 'package:bntu_app/models/question_model.dart' as _i17;
import 'package:bntu_app/repository/questions_repository.dart' as _i16;
import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:yandex_mapkit/yandex_mapkit.dart' as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCollectionReference_0<T extends Object?> extends _i1.Fake
    implements _i2.CollectionReference<T> {}

class _FakeFaculty_1 extends _i1.Fake implements _i3.Faculty {}

class _FakeFirebaseFirestore_2 extends _i1.Fake
    implements _i2.FirebaseFirestore {}

/// A class which mocks [FacultiesFirestoreRepository].
///
/// See the documentation for Mockito's code generation for more information.
class BaseMockFacultiesFirestoreRepository extends _i1.Mock
    implements _i4.FacultiesFirestoreRepository {
  @override
  _i2.CollectionReference<Map<String, dynamic>> get dbRef =>
      (super.noSuchMethod(Invocation.getter(#dbRef),
              returnValue: _FakeCollectionReference_0<Map<String, dynamic>>())
          as _i2.CollectionReference<Map<String, dynamic>>);
  @override
  _i5.Future<void> addFaculty(
          String? name,
          String? shortName,
          String? about,
          String? hotLineNumber,
          String? hotLineMail,
          String? forInquiriesNumber,
          String? forHostelNumber,
          String? imagePath) =>
      (super.noSuchMethod(
          Invocation.method(#addFaculty, [
            name,
            shortName,
            about,
            hotLineNumber,
            hotLineMail,
            forInquiriesNumber,
            forHostelNumber,
            imagePath
          ]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> editFaculty(
          String? name,
          String? shortName,
          String? about,
          String? hotLineNumber,
          String? hotLineMail,
          String? forInquiriesNumber,
          String? forHostelNumber,
          String? imagePath,
          String? id) =>
      (super.noSuchMethod(
          Invocation.method(#editFaculty, [
            name,
            shortName,
            about,
            hotLineNumber,
            hotLineMail,
            forInquiriesNumber,
            forHostelNumber,
            imagePath,
            id
          ]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<List<_i3.Faculty>> getFacultiesList() =>
      (super.noSuchMethod(Invocation.method(#getFacultiesList, []),
              returnValue: Future<List<_i3.Faculty>>.value(<_i3.Faculty>[]))
          as _i5.Future<List<_i3.Faculty>>);
  @override
  _i5.Future<void> removeFaculty(String? id, String? name) =>
      (super.noSuchMethod(Invocation.method(#removeFaculty, [id, name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<List<String>> getFacultiesShortNames() =>
      (super.noSuchMethod(Invocation.method(#getFacultiesShortNames, []),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i5.Future<List<String>>);
  @override
  _i5.Future<_i3.Faculty> getFacultyByShortName(String? name) =>
      (super.noSuchMethod(Invocation.method(#getFacultyByShortName, [name]),
              returnValue: Future<_i3.Faculty>.value(_FakeFaculty_1()))
          as _i5.Future<_i3.Faculty>);
}

/// A class which mocks [SpecialtiesFirestoreRepository].
///
/// See the documentation for Mockito's code generation for more information.
class BaseMockSpecialtiesFirestoreRepository extends _i1.Mock
    implements _i6.SpecialtiesFirestoreRepository {
  @override
  _i2.CollectionReference<Map<String, dynamic>> get dbRef =>
      (super.noSuchMethod(Invocation.getter(#dbRef),
              returnValue: _FakeCollectionReference_0<Map<String, dynamic>>())
          as _i2.CollectionReference<Map<String, dynamic>>);
  @override
  _i5.Future<List<_i7.Speciality>> getSpecialtiesList() => (super.noSuchMethod(
          Invocation.method(#getSpecialtiesList, []),
          returnValue: Future<List<_i7.Speciality>>.value(<_i7.Speciality>[]))
      as _i5.Future<List<_i7.Speciality>>);
  @override
  _i5.Future<void> addSpeciality(
          String? facultyBased,
          String? name,
          String? number,
          String? about,
          String? qualification,
          String? trainingDurationDayFull,
          String? trainingDurationDayShort,
          String? trainingDurationCorrespondenceFull,
          String? trainingDurationCorrespondenceShort,
          List<String>? entranceTestsFull,
          List<String>? entranceShort,
          String? admissionCurrentDayFullBudget,
          String? admissionCurrentDayShortBudget,
          String? admissionCurrentDayFullPaid,
          String? admissionCurrentDayShortPaid,
          String? admissionCurrentCorrespondenceFullBudget,
          String? admissionCurrentCorrespondenceShortBudget,
          String? admissionCurrentCorrespondenceFullPaid,
          String? admissionCurrentCorrespondenceShortPaid,
          String? passScorePrevYearDayFullBudget,
          String? passScorePrevYearDayShortBudget,
          String? passScorePrevYearDayFullPaid,
          String? passScorePrevYearDayShortPaid,
          String? passScorePrevYearCorrespondenceFullBudget,
          String? passScorePrevYearCorrespondenceShortBudget,
          String? passScorePrevYearCorrespondenceFullPaid,
          String? passScorePrevYearCorrespondenceShortPaid,
          String? admissionPrevYearDayFullBudget,
          String? admissionPrevYearDayShortBudget,
          String? admissionPrevYearDayFullPaid,
          String? admissionPrevYearDayShortPaid,
          String? admissionPrevYearCorrespondenceFullBudget,
          String? admissionPrevYearCorrespondenceShortBudget,
          String? admissionPrevYearCorrespondenceFullPaid,
          String? admissionPrevYearCorrespondenceShortPaid,
          String? passScoreBeforeLastYearDayFullBudget,
          String? passScoreBeforeLastYearDayShortBudget,
          String? passScoreBeforeLastYearDayFullPaid,
          String? passScoreBeforeLastYearDayShortPaid,
          String? passScoreBeforeLastYearCorrespondenceFullBudget,
          String? passScoreBeforeLastYearCorrespondenceShortBudget,
          String? passScoreBeforeLastYearCorrespondenceFullPaid,
          String? passScoreBeforeLastYearCorrespondenceShortPaid) =>
      (super.noSuchMethod(
          Invocation.method(#addSpeciality, [
            facultyBased,
            name,
            number,
            about,
            qualification,
            trainingDurationDayFull,
            trainingDurationDayShort,
            trainingDurationCorrespondenceFull,
            trainingDurationCorrespondenceShort,
            entranceTestsFull,
            entranceShort,
            admissionCurrentDayFullBudget,
            admissionCurrentDayShortBudget,
            admissionCurrentDayFullPaid,
            admissionCurrentDayShortPaid,
            admissionCurrentCorrespondenceFullBudget,
            admissionCurrentCorrespondenceShortBudget,
            admissionCurrentCorrespondenceFullPaid,
            admissionCurrentCorrespondenceShortPaid,
            passScorePrevYearDayFullBudget,
            passScorePrevYearDayShortBudget,
            passScorePrevYearDayFullPaid,
            passScorePrevYearDayShortPaid,
            passScorePrevYearCorrespondenceFullBudget,
            passScorePrevYearCorrespondenceShortBudget,
            passScorePrevYearCorrespondenceFullPaid,
            passScorePrevYearCorrespondenceShortPaid,
            admissionPrevYearDayFullBudget,
            admissionPrevYearDayShortBudget,
            admissionPrevYearDayFullPaid,
            admissionPrevYearDayShortPaid,
            admissionPrevYearCorrespondenceFullBudget,
            admissionPrevYearCorrespondenceShortBudget,
            admissionPrevYearCorrespondenceFullPaid,
            admissionPrevYearCorrespondenceShortPaid,
            passScoreBeforeLastYearDayFullBudget,
            passScoreBeforeLastYearDayShortBudget,
            passScoreBeforeLastYearDayFullPaid,
            passScoreBeforeLastYearDayShortPaid,
            passScoreBeforeLastYearCorrespondenceFullBudget,
            passScoreBeforeLastYearCorrespondenceShortBudget,
            passScoreBeforeLastYearCorrespondenceFullPaid,
            passScoreBeforeLastYearCorrespondenceShortPaid
          ]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> editSpeciality(
          String? facultyBased,
          String? name,
          String? number,
          String? about,
          String? qualification,
          String? trainingDurationDayFull,
          String? trainingDurationDayShort,
          String? trainingDurationCorrespondenceFull,
          String? trainingDurationCorrespondenceShort,
          List<String>? entranceTestsFull,
          List<String>? entranceShort,
          String? admissionCurrentDayFullBudget,
          String? admissionCurrentDayShortBudget,
          String? admissionCurrentDayFullPaid,
          String? admissionCurrentDayShortPaid,
          String? admissionCurrentCorrespondenceFullBudget,
          String? admissionCurrentCorrespondenceShortBudget,
          String? admissionCurrentCorrespondenceFullPaid,
          String? admissionCurrentCorrespondenceShortPaid,
          String? passScorePrevYearDayFullBudget,
          String? passScorePrevYearDayShortBudget,
          String? passScorePrevYearDayFullPaid,
          String? passScorePrevYearDayShortPaid,
          String? passScorePrevYearCorrespondenceFullBudget,
          String? passScorePrevYearCorrespondenceShortBudget,
          String? passScorePrevYearCorrespondenceFullPaid,
          String? passScorePrevYearCorrespondenceShortPaid,
          String? admissionPrevYearDayFullBudget,
          String? admissionPrevYearDayShortBudget,
          String? admissionPrevYearDayFullPaid,
          String? admissionPrevYearDayShortPaid,
          String? admissionPrevYearCorrespondenceFullBudget,
          String? admissionPrevYearCorrespondenceShortBudget,
          String? admissionPrevYearCorrespondenceFullPaid,
          String? admissionPrevYearCorrespondenceShortPaid,
          String? passScoreBeforeLastYearDayFullBudget,
          String? passScoreBeforeLastYearDayShortBudget,
          String? passScoreBeforeLastYearDayFullPaid,
          String? passScoreBeforeLastYearDayShortPaid,
          String? passScoreBeforeLastYearCorrespondenceFullBudget,
          String? passScoreBeforeLastYearCorrespondenceShortBudget,
          String? passScoreBeforeLastYearCorrespondenceFullPaid,
          String? passScoreBeforeLastYearCorrespondenceShortPaid,
          String? id) =>
      (super.noSuchMethod(
          Invocation.method(#editSpeciality, [
            facultyBased,
            name,
            number,
            about,
            qualification,
            trainingDurationDayFull,
            trainingDurationDayShort,
            trainingDurationCorrespondenceFull,
            trainingDurationCorrespondenceShort,
            entranceTestsFull,
            entranceShort,
            admissionCurrentDayFullBudget,
            admissionCurrentDayShortBudget,
            admissionCurrentDayFullPaid,
            admissionCurrentDayShortPaid,
            admissionCurrentCorrespondenceFullBudget,
            admissionCurrentCorrespondenceShortBudget,
            admissionCurrentCorrespondenceFullPaid,
            admissionCurrentCorrespondenceShortPaid,
            passScorePrevYearDayFullBudget,
            passScorePrevYearDayShortBudget,
            passScorePrevYearDayFullPaid,
            passScorePrevYearDayShortPaid,
            passScorePrevYearCorrespondenceFullBudget,
            passScorePrevYearCorrespondenceShortBudget,
            passScorePrevYearCorrespondenceFullPaid,
            passScorePrevYearCorrespondenceShortPaid,
            admissionPrevYearDayFullBudget,
            admissionPrevYearDayShortBudget,
            admissionPrevYearDayFullPaid,
            admissionPrevYearDayShortPaid,
            admissionPrevYearCorrespondenceFullBudget,
            admissionPrevYearCorrespondenceShortBudget,
            admissionPrevYearCorrespondenceFullPaid,
            admissionPrevYearCorrespondenceShortPaid,
            passScoreBeforeLastYearDayFullBudget,
            passScoreBeforeLastYearDayShortBudget,
            passScoreBeforeLastYearDayFullPaid,
            passScoreBeforeLastYearDayShortPaid,
            passScoreBeforeLastYearCorrespondenceFullBudget,
            passScoreBeforeLastYearCorrespondenceShortBudget,
            passScoreBeforeLastYearCorrespondenceFullPaid,
            passScoreBeforeLastYearCorrespondenceShortPaid,
            id
          ]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> removeSpeciality(String? id) =>
      (super.noSuchMethod(Invocation.method(#removeSpeciality, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [SettingsFirestoreRepository].
///
/// See the documentation for Mockito's code generation for more information.
class BaseMockSettingsFirestoreRepository extends _i1.Mock
    implements _i8.SettingsFirestoreRepository {
  @override
  _i2.CollectionReference<Map<String, dynamic>> get dbRef =>
      (super.noSuchMethod(Invocation.getter(#dbRef),
              returnValue: _FakeCollectionReference_0<Map<String, dynamic>>())
          as _i2.CollectionReference<Map<String, dynamic>>);
  @override
  _i5.Future<String> getCurrentAdmissionYear() =>
      (super.noSuchMethod(Invocation.method(#getCurrentAdmissionYear, []),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<String> getSecretKey() =>
      (super.noSuchMethod(Invocation.method(#getSecretKey, []),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<bool> getIsFacultyQuizChecked() =>
      (super.noSuchMethod(Invocation.method(#getIsFacultyQuizChecked, []),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<void> editSettings(String? currentAdmissionYear, String? key) =>
      (super.noSuchMethod(
          Invocation.method(#editSettings, [currentAdmissionYear, key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> editQuizChecked(bool? isFacultiesQuiz) => (super
      .noSuchMethod(Invocation.method(#editQuizChecked, [isFacultiesQuiz]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [InfoCardsFirestoreRepository].
///
/// See the documentation for Mockito's code generation for more information.
class BaseMockInfoCardsFirestoreRepository extends _i1.Mock
    implements _i9.InfoCardsFirestoreRepository {
  @override
  _i2.CollectionReference<Map<String, dynamic>> get dbRef =>
      (super.noSuchMethod(Invocation.getter(#dbRef),
              returnValue: _FakeCollectionReference_0<Map<String, dynamic>>())
          as _i2.CollectionReference<Map<String, dynamic>>);
  @override
  _i5.Future<void> addCard(String? title, String? subtitle) =>
      (super.noSuchMethod(Invocation.method(#addCard, [title, subtitle]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> editCard(String? title, String? subtitle, String? id) =>
      (super.noSuchMethod(Invocation.method(#editCard, [title, subtitle, id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<List<_i10.InfoCard>> getCards() =>
      (super.noSuchMethod(Invocation.method(#getCards, []),
              returnValue: Future<List<_i10.InfoCard>>.value(<_i10.InfoCard>[]))
          as _i5.Future<List<_i10.InfoCard>>);
  @override
  _i5.Future<void> moveUp(String? currId, String? prevId) =>
      (super.noSuchMethod(Invocation.method(#moveUp, [currId, prevId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> moveDown(String? currId, String? nextId) =>
      (super.noSuchMethod(Invocation.method(#moveDown, [currId, nextId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> removeCard(String? id) =>
      (super.noSuchMethod(Invocation.method(#removeCard, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [ErrorMessagesFirestoreRepository].
///
/// See the documentation for Mockito's code generation for more information.
class BaseMockErrorMessagesFirestoreRepository extends _i1.Mock
    implements _i11.ErrorMessagesFirestoreRepository {
  @override
  _i2.CollectionReference<Map<String, dynamic>> get dbErrorRef =>
      (super.noSuchMethod(Invocation.getter(#dbErrorRef),
              returnValue: _FakeCollectionReference_0<Map<String, dynamic>>())
          as _i2.CollectionReference<Map<String, dynamic>>);
  @override
  _i5.Future<void> changeViewedState(String? id) =>
      (super.noSuchMethod(Invocation.method(#changeViewedState, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<String> getUnseenMessages() =>
      (super.noSuchMethod(Invocation.method(#getUnseenMessages, []),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<void> removeErrorMessage(String? id) =>
      (super.noSuchMethod(Invocation.method(#removeErrorMessage, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> submitErrorMessage(String? msg) =>
      (super.noSuchMethod(Invocation.method(#submitErrorMessage, [msg]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<List<_i12.ErrorMessage>> getErrorMessagesList() =>
      (super.noSuchMethod(Invocation.method(#getErrorMessagesList, []),
              returnValue:
                  Future<List<_i12.ErrorMessage>>.value(<_i12.ErrorMessage>[]))
          as _i5.Future<List<_i12.ErrorMessage>>);
}

/// A class which mocks [BuildingsFirestoreRepository].
///
/// See the documentation for Mockito's code generation for more information.
class BaseMockBuildingsFirestoreRepository extends _i1.Mock
    implements _i13.BuildingsFirestoreRepository {
  @override
  _i2.CollectionReference<Map<String, dynamic>> get dbRef =>
      (super.noSuchMethod(Invocation.getter(#dbRef),
              returnValue: _FakeCollectionReference_0<Map<String, dynamic>>())
          as _i2.CollectionReference<Map<String, dynamic>>);
  @override
  _i5.Future<void> addBuilding(String? name, String? optional,
          _i14.Point? point, String? imagePath) =>
      (super.noSuchMethod(
          Invocation.method(#addBuilding, [name, optional, point, imagePath]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> editBuilding(String? name, String? optional,
          _i14.Point? point, String? imagePath, String? id) =>
      (super.noSuchMethod(
          Invocation.method(
              #editBuilding, [name, optional, point, imagePath, id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<List<_i15.Building>> getBuildingsList() =>
      (super.noSuchMethod(Invocation.method(#getBuildingsList, []),
              returnValue: Future<List<_i15.Building>>.value(<_i15.Building>[]))
          as _i5.Future<List<_i15.Building>>);
  @override
  _i5.Future<void> moveDown(String? currId, String? nextId) =>
      (super.noSuchMethod(Invocation.method(#moveDown, [currId, nextId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> moveUp(String? currId, String? prevId) =>
      (super.noSuchMethod(Invocation.method(#moveUp, [currId, prevId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> removeBuilding(String? id) =>
      (super.noSuchMethod(Invocation.method(#removeBuilding, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [QuestionsFirestoreRepository].
///
/// See the documentation for Mockito's code generation for more information.
class BaseMockQuestionsFirestoreRepository extends _i1.Mock
    implements _i16.QuestionsFirestoreRepository {
  @override
  _i2.FirebaseFirestore get dbRef =>
      (super.noSuchMethod(Invocation.getter(#dbRef),
          returnValue: _FakeFirebaseFirestore_2()) as _i2.FirebaseFirestore);
  @override
  _i5.Future<void> addQuestion(String? collection, String? question,
          List<Map<String, dynamic>>? answers) =>
      (super.noSuchMethod(
          Invocation.method(#addQuestion, [collection, question, answers]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> editQuestion(String? collection, String? id,
          String? question, List<Map<String, dynamic>>? answers) =>
      (super.noSuchMethod(
          Invocation.method(#editQuestion, [collection, id, question, answers]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<List<_i17.QuestionModel>> getQuestionsList(String? collection) =>
      (super.noSuchMethod(Invocation.method(#getQuestionsList, [collection]),
          returnValue: Future<List<_i17.QuestionModel>>.value(
              <_i17.QuestionModel>[])) as _i5.Future<List<_i17.QuestionModel>>);
  @override
  _i5.Future<void> moveDown(
          String? collection, String? currId, String? nextId) =>
      (super.noSuchMethod(
          Invocation.method(#moveDown, [collection, currId, nextId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> moveUp(String? collection, String? currId, String? prevId) =>
      (super.noSuchMethod(
          Invocation.method(#moveUp, [collection, currId, prevId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> removeQuestion(String? collection, String? id) =>
      (super.noSuchMethod(Invocation.method(#removeQuestion, [collection, id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}
